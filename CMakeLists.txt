cmake_minimum_required(VERSION 3.8)
project(WhiteEngine CXX)

if(NOT CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/WhiteEngine")
endif()


set(SDK_PATH ${CMAKE_SOURCE_DIR}/SDKS)

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    if(MSVC_VERSION GREATER_EQUAL "1900")
        include(CheckCXXCompilerFlag)
        CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
        if(_cpp_latest_flag_supported)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest")
        endif()
    else()
        message(FATAL_ERROR "Unsupported MSVC version \"${MSVC_VERSION}\"")
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /Gm- /W3 /WX /wd4100 /wd4996")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG_TOOL "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG:fastlink")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG_TOOL "${CMAKE_CXX_FLAGS_DEBUG}")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused -Werror")
else()
    message(FATAL_ERROR "Unsupported toolchain \"${CMAKE_CXX_COMPILER_ID}\"")
endif()

if(NOT SET_UP_CONFIGURATIONS_DONE)
    set(SET_UP_CONFIGURATIONS_DONE 1)

    if(CMAKE_CONFIGURATION_TYPES)
        set(CMAKE_CONFIGURATION_TYPES "Debug;Release;Debug_TOOL" CACHE STRING "" FORCE) 
    else()
        if(NOT CMAKE_BUILD_TYPE)
            set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)
        endif()
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY HELPSTRING "Choose the type of build")
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug;Release;Debug_TOOL")
    endif()

    if(NOT CMAKE_CXX_FLAGS_DEBUG_TOOL)
        set(CMAKE_CXX_FLAGS_DEBUG_TOOL "${CMAKE_CXX_FLAGS}")
    endif()
endif()


add_subdirectory(Engine)
add_subdirectory(WBase)
add_subdirectory(WFramework)
add_subdirectory(WScheme)
add_subdirectory(WTest)
