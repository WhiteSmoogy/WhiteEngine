using platform::Render::Mapper;
using TMA = platform::Render::TextureMapAccess;

#include <WBase/exception.h>
#include "Asset/TextureX.h"

void Texture1D::Resize(platform::Render::Texture1D & base_target, const Box1D& dst,const Box1D& src, bool linear)
{
	auto & target = static_cast<Texture1D&>(base_target);
	auto & device = Context::Instance().GetDevice();

	std::unique_ptr<Texture1D> src_cpu;
	Texture1D* src_cpu_ptr = this;
	Box1D src_cpu_box {src.width};
	if (white::has_anyflags(GetAccessMode(),EAccessHint::CPURead)) {
		src_cpu_box = src;
	}
	else {
		src_cpu =white::unique_raw(device.CreateTexture(src.width, 1, 1, GetFormat(), white::underlying(EAccessHint::CPURead), GetSampleInfo()));
		src_cpu_ptr = src_cpu.get();

		CopyToSubTexture(*src_cpu,src_cpu_box, src);
	}

	std::unique_ptr<Texture1D> dst_cpu;
	Texture1D* dst_cpu_ptr = &target;
	Box1D dst_cpu_box {dst.width};
	if (white::has_anyflags(target.GetAccessMode(),EAccessHint::CPURead)) {
		dst_cpu_box = dst;
	}
	else {
		dst_cpu =white::unique_raw(device.CreateTexture(dst.width, 1, 1, 
			target.GetFormat(), white::underlying(EAccessHint::CPUWrite), target.GetSampleInfo()));
		dst_cpu_ptr = dst_cpu.get();
	}

	{
		Mapper src_cpu_mapper(*src_cpu_ptr,TMA::ReadOnly,src_cpu_box);
		Mapper dst_cpu_mapper(*dst_cpu_ptr,TMA::WriteOnly,dst_cpu_box);

		platform::X::ResizeTexture(dst_cpu_mapper.Pointer<uint8>(), dst_cpu_mapper.RowPitch, dst_cpu_mapper.SlicePitch, target.GetFormat(),
			dst.width, 1, 1,
			src_cpu_mapper.Pointer<uint8>(), src_cpu_mapper.RowPitch, src_cpu_mapper.SlicePitch, GetFormat(),
			src.width, 1, 1,
			linear);
	}

	if (dst_cpu_ptr != &target) {
		dst_cpu_ptr->CopyToSubTexture(target, dst, {{0, 0}, 0, dst.width});
	}
}

void Texture2D::Resize(platform::Render::Texture2D & base_target, const Box2D& dst,
	const Box2D& src, bool linear)
{
	auto & target = static_cast<Texture2D&>(base_target);
	auto & device = Context::Instance().GetDevice();

	std::unique_ptr<Texture2D> src_cpu;
	Texture2D* src_cpu_ptr =this;
	Box2D src_cpu_box {src.width,src.height};
	if (white::has_anyflags(GetAccessMode(),EAccessHint::CPURead))
	{
		src_cpu_box = src;
	}
	else
	{
		src_cpu =white::unique_raw(device.CreateTexture(src.width, src.height, 1, 1,
			GetFormat(), EAccessHint::CPURead | EAccessHint::CPUWrite, GetSampleInfo(), nullptr));
		src_cpu_ptr = src_cpu.get();

		CopyToSubTexture(*src_cpu, src_cpu_box,
			src);
	}

	std::unique_ptr<Texture2D> dst_cpu;
	Texture2D* dst_cpu_ptr = &target;
	Box2D dst_cpu_box {dst.width,dst.height};
	if (white::has_anyflags(target.GetAccessMode(), EAccessHint::CPUWrite) && !IsCompressedFormat(target.GetFormat()))
	{
		dst_cpu_ptr = &target;
		dst_cpu_box = dst;
	}
	else
	{
		dst_cpu =white::unique_raw(device.CreateTexture(dst.width, dst.height, 1, 1,
			target.GetFormat(), EAccessHint::CPURead | EAccessHint::CPUWrite,target.GetSampleInfo(),nullptr));
		dst_cpu_ptr = dst_cpu.get();
	}

	{
		Mapper src_cpu_mapper(*src_cpu_ptr, TMA::ReadOnly, src_cpu_box);
		Mapper dst_cpu_mapper(*dst_cpu_ptr, TMA::WriteOnly, dst_cpu_box);
		platform::X::ResizeTexture(dst_cpu_mapper.Pointer<uint8_t>(), dst_cpu_mapper.RowPitch, dst_cpu_mapper.SlicePitch, target.GetFormat(),
			dst.width, dst.height, 1,
			src_cpu_mapper.Pointer<uint8_t>(), src_cpu_mapper.RowPitch, src_cpu_mapper.SlicePitch,GetFormat(),
			src.width, src.height, 1,
			linear);
	}

	if (dst_cpu_ptr != &target)
	{
		dst_cpu_ptr->CopyToSubTexture(target, dst, {{{0, 0} ,0, dst.width},0, dst.height});
	}
}


void Texture3D::Resize(platform::Render::Texture3D & base_target,const Box3D& dst, const Box3D& src, bool linear)
{
	auto & target = static_cast<Texture3D&>(base_target);
	auto & device = Context::Instance().GetDevice();

	throw white::unimplemented();
}

void TextureCube::Resize(platform::Render::TextureCube & base_target,const BoxCube& dst,const BoxCube& src, bool linear)
{
	auto & target = static_cast<TextureCube&>(base_target);
	auto & device = Context::Instance().GetDevice();

	throw white::unimplemented();
}